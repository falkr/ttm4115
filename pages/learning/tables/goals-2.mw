{|
| Learning Goal
| Comment
|-
| **5.** Capture user requirements and synthesize relevant use cases at a proper level of detail.
| This is an underestimated skill. The resulting use cases are often written in text and don't look spectacular. But formulating bad use cases is the earliest phase in a project where things can go wrong.
|-
| **6.** Write project deliverables that describe system requirements, properties and solutions.
| Producing the right documents, emphasizing relevant questions, reasonable precision level. Can uncover project problems early or even before they arise. Again, learn to ask the right questions.
|-
| **7.** Plan and coordinate the development of larger software products within a team of developers.
| To coordinate a project, you need to know a lot about the architecture of a system, but also the process how to build it and potential pitfalls.
|-
| **8.** Think in terms of states and transitions, and handle complex concurrent behavior correctly.
| It is a valuable skill as an engineer to handle concurrent behavior correctly, independent of technical domain or employed tools.
|-
| **9.** Model different aspects of a system efficiently, especially with regard to an appropriate level of detail and the consistency between different views.
| Modeling is a universal engineering tool in all disciplines and at all stages of system development.
|-
| **10.** Apply agile development methods and reflect about their usage within the context of a project.
| Selecting and reflecting over development methods: How much should you plan ahead? Should you use an agile method? Read an article on development methods, and understanding it based on own experience.
|-
| **11.** Make proper design choices for the system architecture and document them accordingly.
| Learn how to reason about different alternatives together with others. This can happen at a whiteboard or through a document. No matter how, good visualizations are helpful in this task.
|}